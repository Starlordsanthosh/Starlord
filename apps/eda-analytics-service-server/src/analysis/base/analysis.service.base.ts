/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Analysis as PrismaAnalysis,
  Dataset as PrismaDataset,
} from "@prisma/client";

export class AnalysisServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AnalysisCountArgs, "select">): Promise<number> {
    return this.prisma.analysis.count(args);
  }

  async analyses<T extends Prisma.AnalysisFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnalysisFindManyArgs>
  ): Promise<PrismaAnalysis[]> {
    return this.prisma.analysis.findMany<Prisma.AnalysisFindManyArgs>(args);
  }
  async analysis<T extends Prisma.AnalysisFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnalysisFindUniqueArgs>
  ): Promise<PrismaAnalysis | null> {
    return this.prisma.analysis.findUnique(args);
  }
  async createAnalysis<T extends Prisma.AnalysisCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnalysisCreateArgs>
  ): Promise<PrismaAnalysis> {
    return this.prisma.analysis.create<T>(args);
  }
  async updateAnalysis<T extends Prisma.AnalysisUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnalysisUpdateArgs>
  ): Promise<PrismaAnalysis> {
    return this.prisma.analysis.update<T>(args);
  }
  async deleteAnalysis<T extends Prisma.AnalysisDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnalysisDeleteArgs>
  ): Promise<PrismaAnalysis> {
    return this.prisma.analysis.delete(args);
  }

  async getDataset(parentId: string): Promise<PrismaDataset | null> {
    return this.prisma.analysis
      .findUnique({
        where: { id: parentId },
      })
      .dataset();
  }
}
