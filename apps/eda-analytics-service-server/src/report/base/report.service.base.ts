/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Report as PrismaReport,
  Dataset as PrismaDataset,
} from "@prisma/client";
import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class ReportServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(args: Omit<Prisma.ReportCountArgs, "select">): Promise<number> {
    return this.prisma.report.count(args);
  }

  async reports<T extends Prisma.ReportFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReportFindManyArgs>
  ): Promise<PrismaReport[]> {
    return this.prisma.report.findMany<Prisma.ReportFindManyArgs>(args);
  }
  async report<T extends Prisma.ReportFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReportFindUniqueArgs>
  ): Promise<PrismaReport | null> {
    return this.prisma.report.findUnique(args);
  }
  async createReport<T extends Prisma.ReportCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReportCreateArgs>
  ): Promise<PrismaReport> {
    return this.prisma.report.create<T>(args);
  }
  async updateReport<T extends Prisma.ReportUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReportUpdateArgs>
  ): Promise<PrismaReport> {
    return this.prisma.report.update<T>(args);
  }
  async deleteReport<T extends Prisma.ReportDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReportDeleteArgs>
  ): Promise<PrismaReport> {
    return this.prisma.report.delete(args);
  }

  async uploadFile<T extends Prisma.ReportFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReportFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaReport> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "file";
    const file = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.report.update({
      where: args.where,

      data: {
        file: file as InputJsonValue,
      },
    });
  }

  async downloadFile<T extends Prisma.ReportFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReportFindUniqueArgs>
  ): Promise<FileDownload> {
    const { file } = await this.prisma.report.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      file as unknown as LocalStorageFile
    );
  }

  async deleteFile<T extends Prisma.ReportFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReportFindUniqueArgs>
  ): Promise<PrismaReport> {
    const { file } = await this.prisma.report.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      file as unknown as LocalStorageFile
    );

    return await this.prisma.report.update({
      where: args.where,

      data: {
        file: Prisma.DbNull,
      },
    });
  }

  async getDataset(parentId: string): Promise<PrismaDataset | null> {
    return this.prisma.report
      .findUnique({
        where: { id: parentId },
      })
      .dataset();
  }
}
